// const timerId = setTimeout(function(){ 
//     console.log('Ninja!');
// }, 7000);

// const btn = document.querySelector('.btn');
// let timerId, // Создали переменную в let для использования в локал/глобал
//     i = 0;

// btn.addEventListener('click', () => {
//     // const timerId = setTimeout(logger, 2000); // Запустили таймер кода после клика
//     const timerId = setInterval(logger, 2000); // Установили интервал
// });

// function logger() {
//     if (i === 3) { // Функция остновится на 4 интервалах так как мы задали лимит
//         clearInterval(timerId); // Отключили таймер кода
//     }
//     console.log('text');
//     i++; 
// }

// Пример рекурсивного setTimeOut

// let id = setTimeout(function log(){
//     console.log('Ninja!');
//     id = setTimeout(log, 500); // Разница этого кода в том что здесь строго соблюдается интервал в пол секунды
// }, 500); // В коде выше интервал соблюдается только в первом шаге, а далее 3 раза код работает уже без интервала



// Практика, работа с анимацией которую можно встретить в коде, но уже не так часто

const btn = document.querySelector('.btn');
let timerId, //
    i = 0;

function myAnimation() {
    const elem = document.querySelector('.box'); // Из верстки взяли класс с квадратиком который будет двигаться
    let pos = 0; // переменная позиции с которой всё стартует и далее изменяется

    const id = setInterval(frame, 10); // Запустили интервал, где наша функция frame двигается каждые 10 мсек
    // далее мы передаем переменную id во внутрь нашей функции, в clearInterval

    function frame() { // Создали функцию которая будет запускаться через определенный промежуток времени
// Прописываем условие по которой наша переменная pos будет изменяться
        if (pos == 300) { // 300 - конечное значение (пиксели где анимация остановится, исходя из текущего стиля в css)
            clearInterval(id); // с помощью функции отчищаем нашу анимацию и восстанавливаем её
        } else { // Прописываем здесь дейяствия которые будут выполняться если анимация началась или еще не завершилась
            pos++; // Увеличиваем начальную позицию на единицу
            elem.style.top = pos + "px"; // на каждом шаге анимации задали параметры для pos на плюс один пиксель
            elem.style.left = pos + "px"; // также делаем с параметром left, так как анимация двигается по диагонали
        } // Осталось запустить интервал для плавной анимации !!! сделал это выше, в переменной id !!!
    }
}

btn.addEventListener('click', myAnimation); // Сделали триггер нашей анимации на кнопку Animation (.box), теперь при  
// нажатии на кнопку myAnimation наш квадрат движется по диагонали вниз