'use strict';

// Интерполяция (ES6) - значит что мы внутри строки можем вставлять
// значение переменной
// Приём работает только когда используются косые кавычки ``

// Пример интерполяции

const example = "my example";

console.log(`This is ${example}`);


// #12 урок. Первая практика

/* Задание на урок:

1) Создать переменную numberOfFilms и в неё поместить ответ от пользователя на вопрос:
'Сколько фильмов вы уже посмотрели?'

2) Создать объект personalMovieDB и в него поместить такие свойства:
    - count - сюда передается ответ на первый вопрос
    - movies - в это свойство поместить пустой объект
    - actors - тоже поместить пустой объект
    - genres - сюда поместить пустой массив
    - privat - в это свойство поместить boolean(логическое) значение false

3) Задайте пользователю по два раза вопросы:
    - 'Один из последних просмотренных фильмов?'
    - 'На сколько оцените его?'
Ответы стоит поместить в отдельные переменные
Записать ответы в объект movies в формате: 
    movies: {
        'logan': '8.1'
    }

Проверить, чтобы все работало без ошибок в консоли */

// const numberOfFilms = +prompt('Сколько фильмов вы уже посмотрели?', '');

// const personalMovieDB = {
//     count: numberOfFilms,
//     movies: {},
//     actors: {},
//     genres: {},
//     privat: false
// };

// const movieA = +prompt('Один из последних просмотренных фильмов?', ''),
//       rateA = +prompt('На сколько оцените его?', ''),
//       movieB = +prompt('Один из последних просмотренных фильмов?', ''),
//       rateB = +prompt('На сколько оцените его?', '');




// Условия if else

if (2 == 5) { // if условие, в скобках пишем условие которое хотим проверить
    console.log('Da!'); // в консоли пусто так как 2 не равно 5
} else { // тут будут действия в случае не равенства условия (2 == 5)
 console.log('No!');
}

// Чтобы не создавать много ветвлений из if else if else, можно использовать switch

const whatAbout = 50;

switch (whatAbout) { // в switch помещаем переменную. Switch это всегда строгое сравнение в отличии от условий if
    case 49: // Указали значение которое хотим проверить
    console.log('Ошибка');
    break; // После каждой проверки надо ставить break 
    // Если переменная будет равна 49 то скрипт пойдет проверять все действия если не поставить break
    case 324:
    console.log('Ошибка');
    break;
    case 50:
    console.log('Hurah!');
    break; // если ни один из кейсов не выполняется то используем default для выполнения действ. по умолч.
    default:
        console.log('Not today! :(');
        break;
}


// Цикл for
// самый популярный цикл среди while, do потому что мы можем его подрнобно настроить

for (let i = 1; i < 12; i++) { // сначала ключевое слово for, далее в скобках должно быть условие
    console.log(i); // состоящее из 3 аргументов: 1) переменная i; 2) пишем условие при котором цикл остановит работу
} // 3) записываем шаг цикла, то есть что будет происходить каждый раз в новом цикле. Использовали конструкцию 
// с инкрементом ++

// Более сложный пример

for (let i = 1; i < 12; i++) { // успользуем условие и когда цикл доходит до 6 - скрипт останавливает цикл из-за break.
    if (i === 6) { 
        // break;
        continue; // оператор позволяет нам не прерывать цикл, но пропустить нужный шаг, в нашем случае это 6
    }

    console.log(i);
}

// Стрелочные функции

let maybe = 1; // глобальная переменная

function showFirstMessage(text) { // Внутри функции можно задать аргумент в скобках
    console.log("Ninja!"); // Создали функцию
    let maybe = 2; // локальная переменная. Если удалить эту переменную, то ниже будет искать и найдет глобальную
    console.log(maybe); // вызывает внутри функции локальную переменную
}

showFirstMessage(); // Вызвали функцию
console.log(maybe); // обращается к глобальной переменной, так как она ничего не знает о локальной

// функция может вернуть ключевое значение при помощи return

function calc(a, b) {
    return (a + b); // можем использовать функцию с различными аргументами, тем самым автоматизируем процессы
}

console.log(calc(1, 6));
console.log(calc(1534, 10));
console.log(calc(7, 2));

// в return еще есть возвращение значения наружу

function ret() {
    let num = 50;

    // какой-то код
    // какой-то код
    // какой-то код
    // какой-то код
    // какой-то код
    // какой-то код
    // какой-то код

    return num; // во внешний код наша функция возвращает значение локальной переменной

}

const anotherNum = ret(); // вывели результат из локальной переменной
console.log(anotherNum);

// function declaration - создается до начала выполнения скрипта, можно вызвать перед объявлением
// пример = function foo() { код }

// function expression - создается только когда доходит поток кода, можно вызвать только после объявления 
// пример = let foo = function() { код }

const logger = function() {
    console.log("Hello");
};

logger();

// стрелочные функции - не имеет своего контекста (this) 
// () =>

// Стрелочные функции

const numb = (a, b) => a + b;

// Callback функции

function learnJS(lang, callback) {
    console.log(`Я учу: ${lang}`);
    callback(); // благодаря callback мы сохраняем последовательность функции
}

learnJS('JavaScript', function() {
    console.log('Я прошел этот урок');
});